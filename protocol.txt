Massey Omura File Transfer Protocol

1. General information
MOF aims to secure file transfer through Massey-Omura algorithm. The communication takes place between two ends, which we call Initiator (I) and Responder (R).
The core part (CORE) of the algorithm is made up of the following steps:

I1) initiator chooses a random prime number P.
I2) P is sent to R.
I3) I computes Ei of Z*(P-1)
I4) I computes Di = Ei ^ -1 in Z*(P-1)
R1) R receives P
R2) R computes Er of Z*(P-1)
R3) R computes Dr = Er ^ -1 in Z*(P-1)
I5) I computes C = M ^ Ei mod (P)
I6) C is sent to R
R4) R receives C
R5) R computes D = C^Er mod (P)
R6) D is sent to I
I7) I receives D
I8) I computes E = D ^ Di mod (P)
I9) I sends E to R
R7) R receives E
R8) R computes M = E ^ Dr mod (P)

This technique provides secure transmission of the message M,
apart from the authentication, which is not guaranteed.
Anyway, every chunk of data needs to be "treaten" 4 times and
takes 3 transmissions to be finally delivered.
There are some ways to lessen the waste:
a) Use CORE just to share a secret, then use plain block cipher
to encrypt/decrypt. The secret could be periodically changed in
a random way during the communication.
b) Use CORE to transmit each chunk, but the prime number P is
shared once per session (or periodically changed). This allows to
use (Ei,Di,Er,Dr) more than once per chunk.
c) In any case, let the communication take place within a frame,
a session, such that multiple chunks can be treaten in a parallel
fashion, and still warrant the chunks to be rearranged in the
right order.

Naturally, this protocol is intended to be run over TCP/IP network,
i.e. there is an underlying session capable protocol. Anyway it
could be useful to devise a datagram-based version for short messaging.

To allow multiple types of communication, an application-level
packet layout must be set conveniently.

Packet Layout

HEADER                      BODY
+---------------------------+----------------------------...----------------+
|                           |
|                           |
+-> Subprotocol Code        |
|                           |
+-> Session ID              |
|                           |
+-> Packet ID               |
|                           |
+-> Command Code            |
|                           |
+-> Options                 |
|                           |
+-> Body length: bytes      |
                            |
			    |
			    |
			    |
			    +---> data (prime number, encrypted data, file name,
			          protocol command code details or text);
			    	  the structure depends on the particular command
				  being issued.

Subprotocol
Protocol provides ways to transfer a file from or to a server, i.e.
two basic operations are provided: get and put.
These operations are always to be seen from client-viewpoint. The get
operation aims to get a file from the server, while the put operation
aims to send a file to the server. The subprotocol code identifies the
version of the protocol and the operation which is to be performed.

Session
Any operation initializes a session context, identified by an ID.

Packet ID
Packets are numbered, so that they can be conveniently reordered once
they are received in a possibily unordered fashion.

Commands
During communication, both the ends send commands to each other to accomplish
several tasks: negotiating protocol parameters, sending a prime, sending a number,
specifying a file name or length.

Options
A command may be accompanied by some options which will affect the other end's
behaviour.

Body Length
The receiving end is told the length of the body, i.e. the bytes he's supposed to
read to complete the acquisition of the packet.
